import pymel.core as pm

class meta_ctrl:
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.5
        circle_values = [[0,1,0],\
                        [0,0.92388,0.382683],\
                        [0,0.707107,0.707107],\
                        [0,0.382683,0.92388],\
                        [0,0,1],\
                        [0,-0.382683,0.92388],\
                        [0,-0.707107,0.707107],\
                        [0,-0.92388,0.382683],\
                        [0,-1,0],\
                        [0,-0.92388,-0.382683],\
                        [0,-0.707107,-0.707107],\
                        [0,-0.382683,-0.92388],\
                        [0,0,-1],\
                        [0,0.382683,-0.92388],\
                        [0,0.707107,-0.707107],\
                        [0,0.92388,-0.382683],\
                        [0,1,0],\
                        [0.382683,0.92388,0],\
                        [0.707107,0.707107,0],\
                        [0.92388,0.382683,0],\
                        [1,0,0],\
                        [0.92388,-0.382683,0],\
                        [0.707107,-0.707107,0],\
                        [0.382683,-0.92388,0],\
                        [0,-1,0],\
                        [-0.382683,-0.92388,0],\
                        [-0.707107,-0.707107,0],\
                        [-0.92388,-0.382683,0],\
                        [-1,0,0],\
                        [-0.92388,0.382683,0],\
                        [-0.707107,0.707107,0],\
                        [-0.382683,0.92388,0],\
                        [0,1,0],\
                        [0,0.92388,-0.382683],\
                        [0,0.707107,-0.707107],\
                        [0,0.382683,-0.92388],\
                        [0,0,-1],\
                        [-0.382683,0,-0.92388],\
                        [-0.707107,0,-0.707107],\
                        [-0.92388,0,-0.382683],\
                        [-1,0,0],\
                        [-0.92388,0,0.382683],\
                        [-0.707107,0,0.707107],\
                        [-0.382683,0,0.92388],\
                        [0,0,1],\
                        [0.382683,0,0.92388],\
                        [0.707107,0,0.707107],\
                        [0.92388,0,0.382683],\
                        [1,0,0],\
                        [0.92388,0,-0.382683],\
                        [0.707107,0,-0.707107],\
                        [0.382683,0,-0.92388],\
                        [0,0,-1],\
                        ]

        
        points_values = []

        for i in circle_values:
            x = i[0] * size[0] + offset[0]
            y = i[1] * size[1] + offset[1]
            z = i[2] * size[2] + offset[2]
            points_values.append([x,y,z])
            
        curve = pm.curve(name=name,\
            degree = 1,\
            knot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
                    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
                    39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\
            point = points_values)
        self.curve = curve

class rotation_ctrl:
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.35
        circle_values = [[0.0, -1.0, -2.22044604925e-16],\
                        [0.382683, -0.92388, -2.05142569598e-16],\
                        [0.707107, -0.707107, -1.57009294455e-16],\
                        [0.92388, -0.382683, -8.49726955465e-17],\
                        [1.0, 0.0, 0.0],\
                        [0.92388, 0.382683, 8.49726955465e-17],\
                        [0.707107, 0.707107, 1.57009294455e-16],\
                        [0.382683, 0.92388, 2.05142569598e-16],\
                        [0.0, 1.0, 2.22044604925e-16],\
                        [-0.382683, 0.92388, 2.05142569598e-16],\
                        [-0.707107, 0.707107, 1.57009294455e-16],\
                        [-0.92388, 0.382683, 8.49726955465e-17],\
                        [-1.0, 0.0, 0.0],\
                        [-0.92388, -0.382683, -8.49726955465e-17],\
                        [-0.707107, -0.707107, -1.57009294455e-16],\
                        [-0.382683, -0.92388, -2.05142569598e-16],\
                        [0.0, -1.0, -2.22044604925e-16],\
                        [0.0, -0.92388, -0.382683],\
                        [0.0, -0.707107, -0.707107],\
                        [0.0, -0.382683, -0.92388],\
                        [0.0, 2.22044604925e-16, -1.0],\
                        [-0.382683, 2.05142569598e-16, -0.92388],\
                        [-0.707107, 1.57009294455e-16, -0.707107],\
                        [-0.92388, 8.49726955465e-17, -0.382683],\
                        [-1.0, 0.0, 0.0],\
                        [-0.92388, -8.49726955465e-17, 0.382683],\
                        [-0.707107, -1.57009294455e-16, 0.707107],\
                        [-0.382683, -2.05142569598e-16, 0.92388],\
                        [0.0, -2.22044604925e-16, 1.0],\
                        [0.382683, -2.05142569598e-16, 0.92388],\
                        [0.707107, -1.57009294455e-16, 0.707107],\
                        [0.92388, -8.49726955465e-17, 0.382683],\
                        [1.0, 0.0, 0.0],\
                        [0.92388, 8.49726955465e-17, -0.382683],\
                        [0.707107, 1.57009294455e-16, -0.707107],\
                        [0.382683, 2.05142569598e-16, -0.92388],\
                        [0.0, 2.22044604925e-16, -1.0],\
                        [0.0, -0.382683, -0.92388],\
                        [0.0, -0.707107, -0.707107],\
                        [0.0, -0.92388, -0.382683],\
                        [0.0, -1.0, -2.22044604925e-16],\
                        [0.0, -0.92388, 0.382683],\
                        [0.0, -0.707107, 0.707107],\
                        [0.0, -0.382683, 0.92388],\
                        [0.0, -2.22044604925e-16, 1.0],\
                        [0.0, 0.382683, 0.92388],\
                        [0.0, 0.707107, 0.707107],\
                        [0.0, 0.92388, 0.382683],\
                        [0.0, 1.0, 2.22044604925e-16],\
                        [0.0, 0.92388, -0.382683],\
                        [0.0, 0.707107, -0.707107],\
                        [0.0, 0.382683, -0.92388],\
                        [0.0, 2.22044604925e-16, -1.0],\
                        [0.140496795465, 0.0, -2.99348869172],\
                        [1.03785544248, 0.0, -2.81323989894],\
                        [1.48078006847, 0.0, -2.60907713026],\
                        [1.84195272448, 0.0, -2.36632937389],\
                        [2.19186021682, 0.0, -2.0437612535],\
                        [2.49136570228, 0.0, -1.66551336046],\
                        [2.72366386697, 0.0, -1.25425254822],\
                        [2.88955425337, 0.0, -0.806519115533],\
                        [2.97635839146, 0.0, -0.365299336111],\
                        [2.99453424757, 0.0, 0.117451214936],\
                        [2.9401250715, 0.0, 0.580041707264],\
                        [2.8143929565, 0.0, 1.03467942008],\
                        [2.61659902063, 0.0, 1.46744898697],\
                        [2.35962727868, 0.0, 1.85045236305],\
                        [2.03957726111, 0.0, 2.19573453646],\
                        [1.65763230568, 0.0, 2.49664176716],\
                        [1.19418482508, 0.0, 2.75085114117],\
                        [0.808149982817, 0.0, 2.88909909925],\
                        [1.40544521969, 0.592945, 2.72202136365],\
                        [-0.154883050265, 0.0, 3.15848242685],\
                        [1.40544521969, -0.592945, 2.72202136365],\
                        [0.808149982817, 0.0, 2.88909909925],\
                        [1.24571572251, 0.0, 2.15099574185],\
                        [-0.154883050265, 0.0, 3.15848242685],\
                        [1.56517471688, 0.0, 3.29304698545],\
                        [0.808149982817, 0.0, 2.88909909925],\
                        ]

        
        points_values = []
   
        if orient == 'yz':
            for i in circle_values:
                x = i[1] * size[1] + offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[2] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = i[2] * size[2] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[2] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])

            
        curve = pm.curve(name=name,\
            degree = 1,\
            knot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14\
                    , 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\
                    , 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38\
                    , 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\
                    , 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62\
                    , 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74\
                    , 75, 76, 77, 78]
                        ,\
            point = points_values)
        self.curve = curve
                  
class circle_ctrl(): 
    """Creates a circle shape"""
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.4
            
        circle_values = [[1.959029062228060000000000000000,-1.959029062228050000000000000000],\
                        [-0.000000000000000316079265195733,-2.770485468885960000000000000000],\
                        [-1.959029062228060000000000000000,-1.959029062228060000000000000000],\
                        [-2.770485468885960000000000000000,-0.000000000000000802817376809307],\
                        [-1.959029062228060000000000000000,1.959029062228060000000000000000],\
                        [-0.000000000000000834801340897629,2.770485468885970000000000000000],\
                        [1.959029062228050000000000000000,1.959029062228060000000000000000],\
                        [2.770485468885960000000000000000,0.000000000000001488033149820140],\
                        [1.959029062228060000000000000000,-1.959029062228050000000000000000],\
                        [-0.000000000000000316079265195733,-2.770485468885960000000000000000],\
                        [-1.959029062228060000000000000000,-1.959029062228060000000000000000],\
                        ]\
        
        points_values = []
        
        if orient == 'yz':
            for i in circle_values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 3,\
                knot = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\
                point = points_values)
        self.curve = curve
         
class sphere_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 1
        circle_values = [[0,1,0],\
                        [0,0.92388,0.382683],\
                        [0,0.707107,0.707107],\
                        [0,0.382683,0.92388],\
                        [0,0,1],\
                        [0,-0.382683,0.92388],\
                        [0,-0.707107,0.707107],\
                        [0,-0.92388,0.382683],\
                        [0,-1,0],\
                        [0,-0.92388,-0.382683],\
                        [0,-0.707107,-0.707107],\
                        [0,-0.382683,-0.92388],\
                        [0,0,-1],\
                        [0,0.382683,-0.92388],\
                        [0,0.707107,-0.707107],\
                        [0,0.92388,-0.382683],\
                        [0,1,0],\
                        [0.382683,0.92388,0],\
                        [0.707107,0.707107,0],\
                        [0.92388,0.382683,0],\
                        [1,0,0],\
                        [0.92388,-0.382683,0],\
                        [0.707107,-0.707107,0],\
                        [0.382683,-0.92388,0],\
                        [0,-1,0],\
                        [-0.382683,-0.92388,0],\
                        [-0.707107,-0.707107,0],\
                        [-0.92388,-0.382683,0],\
                        [-1,0,0],\
                        [-0.92388,0.382683,0],\
                        [-0.707107,0.707107,0],\
                        [-0.382683,0.92388,0],\
                        [0,1,0],\
                        [0,0.92388,-0.382683],\
                        [0,0.707107,-0.707107],\
                        [0,0.382683,-0.92388],\
                        [0,0,-1],\
                        [-0.382683,0,-0.92388],\
                        [-0.707107,0,-0.707107],\
                        [-0.92388,0,-0.382683],\
                        [-1,0,0],\
                        [-0.92388,0,0.382683],\
                        [-0.707107,0,0.707107],\
                        [-0.382683,0,0.92388],\
                        [0,0,1],\
                        [0.382683,0,0.92388],\
                        [0.707107,0,0.707107],\
                        [0.92388,0,0.382683],\
                        [1,0,0],\
                        [0.92388,0,-0.382683],\
                        [0.707107,0,-0.707107],\
                        [0.382683,0,-0.92388],\
                        [0,0,-1],\
                        ]

        
        points_values = []

        for i in circle_values:
            x = (i[0] * size[0]) + offset[0]
            y = (i[1] * size[1]) + offset[1]
            z = (i[2] * size[2]) + offset[2]
            points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
                        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
                        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\
                point = points_values)
        self.curve = curve
            
class cube_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 2
        cube_values = [[-0.5, 0.5, -0.5],\
                        [-0.5, 0.5, 0.5],\
                        [0.5, 0.5, 0.5],\
                        [0.5, 0.5, -0.5],\
                        [-0.5, 0.5, -0.5],\
                        [-0.5, -0.5, -0.5],\
                        [-0.5, -0.5, 0.5],\
                        [0.5, -0.5, 0.5],\
                        [0.5, 0.5, 0.5],\
                        [-0.5, 0.5, 0.5],\
                        [-0.5, -0.5, 0.5],\
                        [-0.5, -0.5, -0.5],\
                        [0.5, -0.5, -0.5],\
                        [0.5, 0.5, -0.5],\
                        [0.5, 0.5, 0.5],\
                        [0.5, -0.5, 0.5],\
                        [0.5, -0.5, -0.5],\
                        ]\

        
        points_values = []

        for i in cube_values:
            x = (i[0] * size[0]) + offset[0]
            y = (i[1] * size[1]) + offset[1]
            z = (i[2] * size[2]) + offset[2]
            points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\
                point = points_values)
        self.curve = curve
            
class direction_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.22
        values = [ 
                        [-4.5, 0.0, 0.0],\
                        [-2.5, 0.0, -2.0],\
                        [-2.5, 0.0, -1.5],\
                        [-1.5, 0.0, -1.5],\
                        [-1.5, 0.0, -2.5],\
                        [-2.0, 0.0, -2.5],\
                        [0.0, 0.0, -4.5],\
                        [2.0, 0.0, -2.5],\
                        [1.5, 0.0, -2.5],\
                        [1.5, 0.0, -1.5],\
                        [2.5, 0.0, -1.5],\
                        [2.5, 0.0, -2.0],\
                        [4.5, 0.0, 0.0],\
                        [2.5, 0.0, 2.0],\
                        [2.5, 0.0, 1.5],\
                        [1.5, 0.0, 1.5],\
                        [1.5, 0.0, 2.5],\
                        [2.0, 0.0, 2.5],\
                        [0.0, 0.0, 4.5],\
                        [-2.0, 0.0, 2.5],\
                        [-1.5, 0.0, 2.5],\
                        [-1.5, 0.0, 1.5],\
                        [-2.5, 0.0, 1.5],\
                        [-2.5, 0.0, 2.0],\
                        [-4.5, 0.0, 0.0],\
                        ]\



        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
        
class tongue_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 1
        values = [ 
                [0.0, 0.0, 0.0],\
                [-2.76101316827e-31, 0.0, -5.6],\
                [-0.7, 1.55431223448e-16, -5.6],\
                [-0.7, 1.55431223448e-16, -7.0],\
                [0.7, -1.55431223448e-16, -7.0],\
                [0.7, -1.55431223448e-16, -5.6],\
                [-2.76101316827e-31, 0.0, -5.6],\
                ]\
                
                
                
                
        knots = [0, 1, 2, 3, 4, 5, 6]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
                        
class half_circle_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 1
        values = [ 
        [-1.04874868204e-16, -0.461554392435, 0.0],\
        [-1.0288249358, -0.461554392435, 0.0],\
        [-0.998232136607, -0.300631053658, 0.0],\
        [-0.911481600436, -0.0651447258463, 0.0],\
        [-0.773614077849, 0.145633302934, 0.0],\
        [-0.590174299719, 0.318051359025, 0.0],\
        [-0.369286061635, 0.438728637376, 0.0],\
        [-0.125741786631, 0.501844940368, 0.0],\
        [0.125741786631, 0.501844940368, 0.0],\
        [0.369286061635, 0.438728637376, 0.0],\
        [0.590174299719, 0.318051359025, 0.0],\
        [0.773614077849, 0.145633302934, 0.0],\
        [0.911481600436, -0.0651447258463, 0.0],\
        [0.998232136607, -0.300631053658, 0.0],\
        [1.0288249358, -0.461554392435, 0.0],\
        [-1.38777878078e-16, -0.461554392435, 0.0],\
        ]\
                
                
                
                
        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[1]
                y = i[0] * size[0] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[1] * size[2] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
           
class line_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 1

        values = [
        [0.0, 0.0, 0.0],\
        [0.0, 0.0, 1.0],\
        ]\
                        
                
                
                
        knots = [0, 1]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
            
class mouth_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.22
        values = [ 
                [-6.03609497708, -8.73176495045e-16, 1.45364682439],\
                [-6.35311427945, -2.39016804892e-16, -2.57502429216e-16],\
                [-6.03609497708, 4.3281883535e-16, -1.45364682439],\
                [-5.35560279684, 8.10772681396e-16, -2.18107029959],\
                [-4.70590813745, 8.71367367514e-16, -2.52661749027],\
                [-3.23435728422e-05, 8.5785461326e-16, -3.27360195247],\
                [4.70598621673, 1.05382845538e-15, -2.52674844995],\
                [5.35588266585, 1.14873820249e-15, -2.18103991005],\
                [6.03686532756, 8.73200922584e-16, -1.45366896435],\
                [6.35254826036, 2.38982541573e-16, 7.98920287498e-16],\
                [6.03686532756, -4.32814298951e-16, 1.45366896435],\
                [5.35588266585, -8.10766603045e-16, 2.18103991005],\
                [4.70598621673, -8.71412533051e-16, 2.52674844995],\
                [-3.23435728419e-05, -8.57858529022e-16, 3.27360195247],\
                [-4.70590813745, -1.05377383697e-15, 2.52661749027],\
                [-5.35560279684, -1.14875942692e-15, 2.18107029959],\
                [-6.03609497708, -8.73176495045e-16, 1.45364682439],\
                [-6.35311427945, -2.39016804892e-16, -2.57502429216e-16],\
                [-6.03609497708, 4.3281883535e-16, -1.45364682439],\
                ]



        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2] 
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
            
class eye_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.22
            values = [
            [-1.0000000298, -1.00000011921, 0],\
            [-0.69098302722, -0.951056599617, 0],\
            [-0.412214756012, -0.809017062187, 0],\
            [0.412214636803, -0.809017121792, 0],\
            [0.690982937813, -0.951056659222, 0],\
            [0.999999970198, -1.00000011921, 0],\
            [1.30901697278, -0.951056599617, 0],\
            [1.58778524399, -0.809017062187, 0],\
            [1.80901700258, -0.587785303593, 0],\
            [1.95105654001, -0.309017002583, 0],\
            [2.0, 0.0, 0.0],\
            [1.95105713606, 0.309017181396, 0],\
            [1.80901753902, 0.587785601616, 0],\
            [1.58778560162, 0.80901747942, 0],\
            [1.30901715159, 0.95105701685, 0],\
            [1.0, 1.00000047684,0],\
            [0.690982848406, 0.951056957245, 0],\
            [0.412214517593, 0.809017300606, 0],\
            [-0.412214398384, 0.80901747942, 0],\
            [-0.690982848406, 0.95105701685, 0],\
            [-1.0, 1.00000047684, 0],\
            [-1.30901715159, 0.951056957245,0],\
            [-1.58778548241, 0.809017300606,0],\
            [-1.809017241, 0.587785422802,0],\
            [-1.95105677843, 0.309017062187,0],\
            [-2.00000023842, 0.0, 0.0],\
            [-1.95105677843, -0.309017062187,0],\
            [-1.8090171814, -0.587785363197,0],\
            [-1.5877853632, -0.809017121792,0],\
            [-1.30901706219, -0.951056659222,0],\
            [-1.0000000298, -1.00000011921, 0],\
            ]\


        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[1] * size[1] + offset[2] 
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
                    
class up_down_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.25
        values = [
            [-8.881784197e-16, 0.0, -4.0],\
            [2.0, 0.0, -2.0],\
            [1.0, 0.0, -2.0],\
            [1.0, 0.0, 2.0],\
            [2.0, 0.0, 2.0],\
            [8.881784197e-16, 0.0, 4.0],\
            [-2.0, 0.0, 2.0],\
            [-1.0, 0.0, 2.0],\
            [-1.0, 0.0, -2.0],\
            [-2.0, 0.0, -2.0],\
            [-8.881784197e-16, 0.0, -4.0],\
            ]\

        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve
           
class arrow_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.3
            values = [
                [-5.09711985636e-09, -9.36325733632e-25, -2.08578630954],\
                [-2.82842737589, -5.19573679875e-16, 2.08578630954],\
                [-2.22106067282, -4.08002226551e-16, 1.5905961602],\
                [-1.52896598958, -2.80866495772e-16, 1.22296326728],\
                [-0.779625444841, -1.43214870834e-16, 0.993534141157],\
                [-4.26706924479e-09, -7.83848059116e-25, 0.914213328179],\
                [0.779625432576, 1.43214868581e-16, 0.993534141157],\
                [1.52896598254, 2.80866494478e-16, 1.22296326728],\
                [2.22106065685, 4.08002223619e-16, 1.5905961602],\
                [2.82842737589, 5.19573679875e-16, 2.08578630954],\
                [-5.09711985636e-09, -9.36325733632e-25, -2.08578630954],\
                ]\
                
        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

        points_values = []
        
        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[2] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[2] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        self.curve = curve

class root_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.5
        values = [[1.88884663798e-16, 8.1055990503e-17, -1.32374478191],\
                        [-0.195090322016, 6.00557777148e-17, -0.980785280403],\
                        [-0.382683432365, 5.65713056144e-17, -0.923879532511],\
                        [-0.55557023302, 5.09128299647e-17, -0.831469612303],\
                        [-0.707106781187, 4.32978028118e-17, -0.707106781187],\
                        [-0.831469612303, 3.40188653785e-17, -0.55557023302],\
                        [-0.923879532511, 2.34326020266e-17, -0.382683432365],\
                        [-0.980785280403, 1.19458369201e-17, -0.195090322016],\
                        [-1.32374478191, 3.47706552272e-33, -6.46813595376e-17],\
                        [-0.980785280403, -1.19458369201e-17, 0.195090322016],\
                        [-0.923879532511, -2.34326020266e-17, 0.382683432365],\
                        [-0.831469612303, -3.40188653785e-17, 0.55557023302],\
                        [-0.707106781187, -4.32978028118e-17, 0.707106781187],\
                        [-0.55557023302, -5.09128299647e-17, 0.831469612303],\
                        [-0.382683432365, -5.65713056144e-17, 0.923879532511],\
                        [-0.195090322016, -6.00557777148e-17, 0.980785280403],\
                        [-4.67099139884e-17, -8.1055990503e-17, 1.32374478191],\
                        [0.195090322016, -6.00557777148e-17, 0.980785280403],\
                        [0.382683432365, -5.65713056144e-17, 0.923879532511],\
                        [0.55557023302, -5.09128299647e-17, 0.831469612303],\
                        [0.707106781187, -4.32978028118e-17, 0.707106781187],\
                        [0.831469612303, -3.40188653785e-17, 0.55557023302],\
                        [0.923879532511, -2.34326020266e-17, 0.382683432365],\
                        [0.980785280403, -1.19458369201e-17, 0.195090322016],\
                        [1.32374478191, -2.66972314709e-32, 4.2810230698e-16],\
                        [0.980785280403, 1.19458369201e-17, -0.195090322016],\
                        [0.923879532511, 2.34326020266e-17, -0.382683432365],\
                        [0.831469612303, 3.40188653785e-17, -0.55557023302],\
                        [0.707106781187, 4.32978028118e-17, -0.707106781187],\
                        [0.55557023302, 5.09128299647e-17, -0.831469612303],\
                        [0.382683432365, 5.65713056144e-17, -0.923879532511],\
                        [0.195090322016, 6.00557777148e-17, -0.980785280403],\
                        [5.9303894609e-16, 8.1055990503e-17, -1.32374478191],\
                        ]\

        
        points_values = []

        if orient == 'yz':
            for i in values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy':
            for i in values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])

        curve = pm.curve(name=name,\
                degree = 1,\
                knot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],\
                point = points_values)
        self.curve = curve
            
class shoulder_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.2
            
        circle_values = [[4.42612542607, 1.00444671593, -2.2407597332],\
                            [11.102541143, 8.00679285197, -0.144901492222],\
                            [11.1014871176, 11.0067926668, -0.144901492222],\
                            [13.9638621645, 11.0077983388, 0.753323468198],\
                            [13.9649161899, 8.007798524, 0.753323468198],\
                            [11.102541143, 8.00679285197, -0.144901492222],\
                        ]\
        
        points_values = []
        
        if orient == 'yz':
            for i in circle_values:
                x = offset[0]
                y = i[0] * size[0] + offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])  
                              
        elif orient == 'xz':
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = offset[1]
                z = i[1] * size[1] + offset[2]
                points_values.append([x,y,z])     
                          
        elif orient == 'xy': 
            for i in circle_values:
                x = i[0] * size[0] + offset[0]
                y = i[1] * size[1] + offset[1]
                z = offset[2]
                points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = [0, 1, 2, 3, 4, 5],\
                point = points_values)
        
        self.curve = curve


#locators = ['locator1', 'locator4']
#position_list = []
#
#
#for locator in locators:
#    
#    pos = pm.xform(locator, query = True, worldSpace = True, translation = True)
#    
#    position_list.append(pos)
#    
#    
#print(position_list)
#   
##curve = pm.curve(name = 'python_curve' ,point = [position_list[0],position_list[1]], degree = 3 , knot = [0,0,1,1], bezier = True)
#curve = pm.curve( p=[position_list[0],[1,1,1],[2,2,2],position_list[1]], k=[0,0,0,1,1,1], bezier = True )
            
class cog_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 0.2
            values = [2.0, 0.0, -2.0],\
            [6.0, 0.0, -2.0],\
            [6.0, 0.0, -4.0],\
            [10.0, 0.0, 0.0],\
            [6.0, 0.0, 4.0],\
            [6.0, 0.0, 2.0],\
            [2.0, 0.0, 2.0],\
            [2.0, 0.0, 6.0],\
            [4.0, 0.0, 6.0],\
            [0.0, 0.0, 10.0],\
            [-4.0, 0.0, 6.0],\
            [-2.0, 0.0, 6.0],\
            [-2.0, 0.0, 2.0],\
            [-6.0, 0.0, 2.0],\
            [-6.0, 0.0, 4.0],\
            [-10.0, 0.0, 0.0],\
            [-6.0, 0.0, -4.0],\
            [-6.0, 0.0, -2.0],\
            [-2.0, 0.0, -2.0],\
            [-2.0, 0.0, -6.0],\
            [-4.0, 0.0, -6.0],\
            [0.0, 0.0, -10.0],\
            [4.0, 0.0, -6.0],\
            [2.0, 0.0, -6.0],\
            [2.0, 0.0, -2.0]\
            
            
        knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\

        
        points_values = []

        for i in values:
            x = (i[0] * size[0]) + offset[0]
            y = (i[1] * size[1]) + offset[1]
            z = (i[2] * size[2]) + offset[2]
            points_values.append([x,y,z])


        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        
        self.curve = curve
        
        
class axis_ctrl():    
    def __init__(self, name, offset, orient, size):
        for i in range(0,len(size)):
            size[i] = size[i] * 2
            values =[[-0.5, 0.0, -8.32667268469e-17],\
                    [0.5, 0.0, 8.32667268469e-17],\
                    [9.92616735064e-24, 0.0, -5.96046447754e-08],\
                    [0.0, -0.5, 0.0],\
                    [0.0, 0.5, 0.0],\
                    [9.92616735064e-24, 0.0, -5.96046447754e-08],\
                    [8.32667268469e-17, 0.0, -0.5],\
                    [-8.32667268469e-17, 0.0, 0.5],\
                    [0.0408644833634, 0.0, 0.502401815083],\
                    [0.00367224681419, 0.0, 0.547529697013],\
                    [0.0446967975288, 0.0, 0.547950064959],\
                    [0.00367224681419, 0.0, 0.547529697013],\
                    [0.0408644833634, 0.0, 0.502401815083],\
                    [-8.32667268469e-17, 0.0, 0.5],\
                    [9.92616735064e-24, 0.0, -5.96046447754e-08],\
                    [0.5, 0.0, 8.32667268469e-17],\
                    [0.525639919346, 0.0, 0.0259690524433],\
                    [0.549076952372, 0.0, 0.0437387208827],\
                    [0.525639919346, 0.0, 0.0259690524433],\
                    [0.552628222637, 0.0, 0.00262678722078],\
                    [0.525639919346, 0.0, 0.0259690524433],\
                    [0.513360053297, 0.0, 0.0475727275197],\
                    [0.525639919346, 0.0, 0.0259690524433],\
                    [0.525639919346, 0.0, 0.0259690524433],\
                    [0.5, 0.0, 8.32667268469e-17],\
                    [9.92616735064e-24, 0.0, -5.96046447754e-08],\
                    [0.0, 0.5, 0.0],\
                    [4.33680868994e-19, 0.526639370052, -0.0117157638878],\
                    [2.60208521397e-18, 0.556305363331, -0.0253460851241],\
                    [4.33680868994e-19, 0.526639370052, -0.0117157638878],\
                    [-3.25260651746e-19, 0.55229644532, 0.00271634095068]]
                    
            knots = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

        points_values = []

        for i in values:
            x = (i[0] * size[0]) + offset[0]
            y = (i[1] * size[1]) + offset[1]
            z = (i[2] * size[2]) + offset[2]
            points_values.append([x,y,z])

        curve = pm.curve(name=name,\
                degree = 1,\
                knot = knots,\
                point = points_values)
        
        self.curve = curve
                